# Updated CI Workflow with Enforced Quality Gates
# This file should replace .github/workflows/ci.yml
#
# Key changes:
# - Enforces coverage thresholds (fails on < 80%)
# - Removes soft failure patterns (|| echo "::warning::")
# - Adds PR coverage comments
# - Implements proper quality gates

name: CI

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # HARD FAIL: TypeScript compilation must pass
      - name: Run TypeScript compiler check
        run: npm run build

      # HARD FAIL: Linting must pass
      - name: Run linter
        run: npm run lint

      # HARD FAIL: Type checking must pass  
      - name: Run type checking
        run: npm run typecheck

      # HARD FAIL: Tests with coverage enforcement
      - name: Run tests with coverage
        run: npm run ci:test
        env:
          CI: true

      # Check coverage thresholds - HARD FAIL if below 80% (Node 20.x only)
      - name: Check coverage thresholds
        if: matrix.node-version == '20.x'
        run: |
          npx nyc check-coverage \
            --lines 80 \
            --functions 80 \
            --branches 80 \
            --statements 80

      # Upload coverage reports
      - name: Upload coverage to Codecov
        if: matrix.node-version == '20.x'
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info,./coverage/cobertura-coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false  # Don't fail if token is missing (public repos can work without token)

      # Add coverage comment to PR
      - name: Comment coverage on PR
        if: github.event_name == 'pull_request' && matrix.node-version == '20.x'
        uses: 5monkeys/cobertura-action@v7
        with:
          path: coverage/cobertura-coverage.xml
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          minimum_coverage: 80
          fail_below_threshold: false  # Non-blocking feedback

      # Store coverage reports as artifacts
      - name: Upload coverage artifacts
        if: matrix.node-version == '20.x'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage/
            !coverage/tmp/

  quality-check:
    runs-on: ubuntu-latest
    needs: test  # Only run if tests pass
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # HARD FAIL: Code complexity check
      - name: Analyze code complexity
        run: npm run quality:complexity

      # HARD FAIL: Check for unused dependencies with proper exit codes
      - name: Check for unused dependencies
        run: |
          npx depcheck --json > depcheck-report.json || true
          echo "Depcheck report:"
          cat depcheck-report.json
          if [ -f depcheck-report.json ]; then
            UNUSED=$(jq '.dependencies | length + .devDependencies | length' depcheck-report.json)
            MISSING=$(jq '.missing | length' depcheck-report.json)
            if [ "$UNUSED" -gt 0 ] || [ "$MISSING" -gt 0 ]; then
              echo "❌ Unused or missing dependencies detected (unused: $UNUSED, missing: $MISSING)"
              exit 1
            fi
            echo "✅ No unused or missing dependencies found"
          fi
        shell: bash

      # HARD FAIL: License compliance check with proper validation
      - name: License compliance check
        run: |
          npx license-checker --production --json > licenses.json
          echo "Checking licenses against allowlist..."
          # Define allowed licenses
          ALLOWED_LICENSES="MIT|Apache-2.0|BSD-2-Clause|BSD-3-Clause|ISC|0BSD|CC0-1.0|CC-BY-3.0|CC-BY-4.0|Unlicense"
          
          # Check for disallowed licenses
          DISALLOWED=$(jq -r --arg allowed "$ALLOWED_LICENSES" \
            'to_entries[] | select(.value.licenses | test($allowed) | not) | "\(.key): \(.value.licenses)"' licenses.json || echo "")
          
          if [ -n "$DISALLOWED" ]; then
            echo "❌ Disallowed licenses found:"
            echo "$DISALLOWED"
            exit 1
          fi
          echo "✅ All licenses are compliant"
        shell: bash

      # Upload complexity report
      - name: Upload complexity report
        uses: actions/upload-artifact@v4
        with:
          name: complexity-report
          path: complexity-report.html

  security-check:
    runs-on: ubuntu-latest
    needs: test  # Only run if tests pass
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # HARD FAIL: Security audit
      - name: Run npm security audit
        run: npm audit --audit-level=moderate

      # HARD FAIL: Check for known vulnerabilities  
      - name: Check for known vulnerabilities
        run: npm run security:audit

      # Run secret scanning if configured
      - name: Run secret detection
        run: |
          if [ -f .secrets.baseline ]; then
            npm run security:secrets
          else
            echo "Secret scanning not configured - skipping"
          fi
        continue-on-error: false

  build:
    runs-on: ubuntu-latest
    needs: [test, quality-check, security-check]  # All quality gates must pass
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # HARD FAIL: Build must succeed
      - name: Build project
        run: npm run build

      - name: Check bundle size
        run: |
          echo "Checking build output size..."
          du -sh dist/ || echo "No dist folder found"
          du -sh build/ || echo "No build folder found"

      # Upload build artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: build/