import { Octokit } from '@octokit/rest';\nimport { ToolConfig } from '../types.js';\nimport {\n  ListIssuesParams,\n  CreateIssueParams,\n  UpdateIssueParams,\n  CreateIssueCommentParams,\n  SearchIssuesParams,\n  UpdateIssueCommentParams,\n  DeleteIssueCommentParams, \n  AddLabelsToIssueParams,\n  RemoveLabelFromIssueParams,\n  LockIssueParams,\n  UnlockIssueParams\n} from '../tool-types.js';\n\ninterface GetIssueParams {\n  owner: string;\n  repo: string;\n  issue_number: number;\n}\n\ninterface GetIssueCommentsParams {\n  owner: string;\n  repo: string;\n  issue_number: number;\n  page?: number;\n  perPage?: number;\n}\n\ninterface SearchIssuesWithRepoParams extends SearchIssuesParams {\n  owner?: string;\n  repo?: string;\n}\n\nexport function createIssueTools(octokit: Octokit, readOnly: boolean): ToolConfig[] {\n  const tools: ToolConfig[] = [];\n\n  // Get issue details tool\n  tools.push({\n    tool: {\n      name: 'get_issue',\n      description: 'Get details of a specific GitHub issue',\n      inputSchema: {\n        type: 'object',\n        properties: {\n          owner: {\n            type: 'string',\n            description: 'The owner of the repository',\n          },\n          repo: {\n            type: 'string',\n            description: 'The name of the repository',\n          },\n          issue_number: {\n            type: 'number',\n            description: 'The number of the issue',\n          },\n        },\n        required: ['owner', 'repo', 'issue_number'],\n      },\n    },\n    handler: async (args: unknown) => {\n      const params = args as GetIssueParams;\n      const { data } = await octokit.issues.get({\n        owner: params.owner,\n        repo: params.repo,\n        issue_number: params.issue_number,\n      });\n\n      return {\n        number: data.number,\n        title: data.title,\n        state: data.state,\n        body: data.body,\n        user: {\n          login: data.user?.login,\n          type: data.user?.type,\n        },\n        labels: data.labels.map((label) => \n          typeof label === 'string' ? label : label.name\n        ),\n        assignees: data.assignees?.map((user) => ({\n          login: user.login,\n          type: user.type,\n        })),\n        milestone: data.milestone ? {\n          title: data.milestone.title,\n          number: data.milestone.number,\n          state: data.milestone.state,\n        } : null,\n        comments: data.comments,\n        created_at: data.created_at,\n        updated_at: data.updated_at,\n        closed_at: data.closed_at,\n        html_url: data.html_url,\n      };\n    },\n  });\n\n  // List issues tool\n  tools.push({\n    tool: {\n      name: 'list_issues',\n      description: 'List issues in a GitHub repository',\n      inputSchema: {\n        type: 'object',\n        properties: {\n          owner: {\n            type: 'string',\n            description: 'Repository owner',\n          },\n          repo: {\n            type: 'string',\n            description: 'Repository name',\n          },\n          state: {\n            type: 'string',\n            description: 'Filter by state',\n            enum: ['open', 'closed', 'all'],\n          },\n          labels: {\n            type: 'array',\n            description: 'Filter by labels',\n            items: { type: 'string' },\n          },\n          sort: {\n            type: 'string',\n            description: 'Sort order',\n            enum: ['created', 'updated', 'comments'],\n          },\n          direction: {\n            type: 'string',\n            description: 'Sort direction',\n            enum: ['asc', 'desc'],\n          },\n          since: {\n            type: 'string',\n            description: 'Filter by date (ISO 8601 timestamp)',\n          },\n          page: {\n            type: 'number',\n            description: 'Page number for pagination (min 1)',\n            minimum: 1,\n          },\n          perPage: {\n            type: 'number',\n            description: 'Results per page for pagination (min 1, max 100)',\n            minimum: 1,\n            maximum: 100,\n          },\n        },\n        required: ['owner', 'repo'],\n      },\n    },\n    handler: async (args: unknown) => {\n      const params = args as ListIssuesParams;\n      const { data } = await octokit.issues.listForRepo({\n        owner: params.owner,\n        repo: params.repo,\n        state: params.state as any,\n        labels: Array.isArray(params.labels) \n          ? params.labels.join(',')\n          : (params.labels ? [params.labels].join(',') : undefined),\n        sort: params.sort as any,\n        direction: params.direction as any,\n        since: params.since,\n        page: params.page,\n        per_page: params.perPage,\n      });\n\n      return data.map((issue) => ({\n        number: issue.number,\n        title: issue.title,\n        state: issue.state,\n        user: {\n          login: issue.user?.login,\n          type: issue.user?.type,\n        },\n        labels: issue.labels.map((label) => \n          typeof label === 'string' ? label : label.name\n        ),\n        assignees: issue.assignees?.map((user) => ({\n          login: user.login,\n        })),\n        comments: issue.comments,\n        created_at: issue.created_at,\n        updated_at: issue.updated_at,\n        html_url: issue.html_url,\n        pull_request: issue.pull_request ? true : false,\n      }));\n    },\n  });\n\n  // List issue comments tool\n  tools.push({\n    tool: {\n      name: 'list_issue_comments',\n      description: 'Get comments on a GitHub issue',\n      inputSchema: {\n        type: 'object',\n        properties: {\n          owner: {\n            type: 'string',\n            description: 'Repository owner',\n          },\n          repo: {\n            type: 'string',\n            description: 'Repository name',\n          },\n          issue_number: {\n            type: 'number',\n            description: 'Issue number',\n          },\n          page: {\n            type: 'number',\n            description: 'Page number for pagination (min 1)',\n            minimum: 1,\n          },\n          perPage: {\n            type: 'number',\n            description: 'Results per page for pagination (min 1, max 100)',\n            minimum: 1,\n            maximum: 100,\n          },\n        },\n        required: ['owner', 'repo', 'issue_number'],\n      },\n    },\n    handler: async (args: unknown) => {\n      const params = args as GetIssueCommentsParams;\n      const { data } = await octokit.issues.listComments({\n        owner: params.owner,\n        repo: params.repo,\n        issue_number: params.issue_number,\n        page: params.page,\n        per_page: params.perPage,\n      });\n\n      return data.map((comment) => ({\n        id: comment.id,\n        body: comment.body,\n        user: {\n          login: comment.user?.login,\n          type: comment.user?.type,\n        },\n        created_at: comment.created_at,\n        updated_at: comment.updated_at,\n        html_url: comment.html_url,\n      }));\n    },\n  });\n\n  // Search issues tool\n  tools.push({\n    tool: {\n      name: 'search_issues',\n      description: 'Search for GitHub issues and pull requests',\n      inputSchema: {\n        type: 'object',\n        properties: {\n          query: {\n            type: 'string',\n            description: 'Search query using GitHub issues search syntax',\n          },\n          sort: {\n            type: 'string',\n            description: 'Sort field by number of matches',\n            enum: ['comments', 'reactions', 'reactions-+1', 'reactions--1', 'reactions-smile', 'reactions-thinking_face', 'reactions-heart', 'reactions-tada', 'interactions', 'created', 'updated'],\n          },\n          order: {\n            type: 'string',\n            description: 'Sort order',\n            enum: ['asc', 'desc'],\n          },\n          owner: {\n            type: 'string',\n            description: 'Optional repository owner',\n          },\n          repo: {\n            type: 'string',\n            description: 'Optional repository name',\n          },\n          page: {\n            type: 'number',\n            description: 'Page number for pagination (min 1)',\n            minimum: 1,\n          },\n          perPage: {\n            type: 'number',\n            description: 'Results per page for pagination (min 1, max 100)',\n            minimum: 1,\n            maximum: 100,\n          },\n        },\n        required: ['query'],\n      },\n    },\n    handler: async (args: unknown) => {\n      const params = args as SearchIssuesWithRepoParams;\n      let query = params.query;\n      \n      // Add repo filter if provided\n      if (params.owner && params.repo) {\n        query = `repo:${params.owner}/${params.repo} ${query}`;\n      }\n\n      const { data } = await octokit.search.issuesAndPullRequests({\n        q: query,\n        sort: params.sort as any,\n        order: params.order as any,\n        page: params.page,\n        per_page: params.perPage,\n      });\n\n      return {\n        total_count: data.total_count,\n        incomplete_results: data.incomplete_results,\n        items: data.items.map((item) => ({\n          number: item.number,\n          title: item.title,\n          state: item.state,\n          user: {\n            login: item.user?.login,\n          },\n          labels: item.labels.map((label) => label.name),\n          assignees: item.assignees?.map((user) => ({\n            login: user.login,\n          })),\n          comments: item.comments,\n          created_at: item.created_at,\n          updated_at: item.updated_at,\n          html_url: item.html_url,\n          pull_request: item.pull_request ? true : false,\n          repository_url: item.repository_url,\n        })),\n      };\n    },\n  });\n\n  // Add write operations if not in read-only mode\n  if (!readOnly) {\n    // Create issue tool\n    tools.push({\n      tool: {\n        name: 'create_issue',\n        description: 'Create a new GitHub issue',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            owner: {\n              type: 'string',\n              description: 'Repository owner',\n            },\n            repo: {\n              type: 'string',\n              description: 'Repository name',\n            },\n            title: {\n              type: 'string',\n              description: 'Issue title',\n            },\n            body: {\n              type: 'string',\n              description: 'Issue body content',\n            },\n            assignees: {\n              type: 'array',\n              description: 'Usernames to assign to this issue',\n              items: { type: 'string' },\n            },\n            milestone: {\n              type: 'number',\n              description: 'Milestone number',\n            },\n            labels: {\n              type: 'array',\n              description: 'Labels to apply to this issue',\n              items: { type: 'string' },\n            },\n          },\n          required: ['owner', 'repo', 'title'],\n        },\n      },\n      handler: async (args: unknown) => {\n        const params = args as CreateIssueParams;\n        const { data } = await octokit.issues.create({\n          owner: params.owner,\n          repo: params.repo,\n          title: params.title,\n          body: params.body,\n          assignees: params.assignees,\n          milestone: params.milestone,\n          labels: params.labels,\n        });\n\n        return {\n          number: data.number,\n          title: data.title,\n          state: data.state,\n          body: data.body,\n          html_url: data.html_url,\n          user: {\n            login: data.user?.login,\n          },\n          created_at: data.created_at,\n        };\n      },\n    });\n\n    // Update issue tool\n    tools.push({\n      tool: {\n        name: 'update_issue',\n        description: 'Update an existing GitHub issue',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            owner: {\n              type: 'string',\n              description: 'Repository owner',\n            },\n            repo: {\n              type: 'string',\n              description: 'Repository name',\n            },\n            issue_number: {\n              type: 'number',\n              description: 'Issue number to update',\n            },\n            title: {\n              type: 'string',\n              description: 'New title',\n            },\n            body: {\n              type: 'string',\n              description: 'New description',\n            },\n            state: {\n              type: 'string',\n              description: 'New state',\n              enum: ['open', 'closed'],\n            },\n            labels: {\n              type: 'array',\n              description: 'New labels',\n              items: { type: 'string' },\n            },\n            assignees: {\n              type: 'array',\n              description: 'New assignees',\n              items: { type: 'string' },\n            },\n            milestone: {\n              type: 'number',\n              description: 'New milestone number',\n            },\n          },\n          required: ['owner', 'repo', 'issue_number'],\n        },\n      },\n      handler: async (args: unknown) => {\n        const params = args as UpdateIssueParams;\n        const { data } = await octokit.issues.update({\n          owner: params.owner,\n          repo: params.repo,\n          issue_number: params.issue_number,\n          title: params.title,\n          body: params.body,\n          state: params.state as any,\n          labels: params.labels,\n          assignees: params.assignees,\n          milestone: params.milestone,\n        });\n\n        return {\n          number: data.number,\n          title: data.title,\n          state: data.state,\n          body: data.body,\n          html_url: data.html_url,\n          updated_at: data.updated_at,\n        };\n      },\n    });\n\n    // Create issue comment tool\n    tools.push({\n      tool: {\n        name: 'create_issue_comment',\n        description: 'Add a comment to a GitHub issue',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            owner: {\n              type: 'string',\n              description: 'Repository owner',\n            },\n            repo: {\n              type: 'string',\n              description: 'Repository name',\n            },\n            issue_number: {\n              type: 'number',\n              description: 'Issue number to comment on',\n            },\n            body: {\n              type: 'string',\n              description: 'Comment content',\n            },\n          },\n          required: ['owner', 'repo', 'issue_number', 'body'],\n        },\n      },\n      handler: async (args: unknown) => {\n        const params = args as CreateIssueCommentParams;\n        const { data } = await octokit.issues.createComment({\n          owner: params.owner,\n          repo: params.repo,\n          issue_number: params.issue_number,\n          body: params.body,\n        });\n\n        return {\n          id: data.id,\n          body: data.body,\n          user: {\n            login: data.user?.login,\n          },\n          created_at: data.created_at,\n          html_url: data.html_url,\n        };\n      },\n    });\n\n    // Update issue comment tool\n    tools.push({\n      tool: {\n        name: 'update_issue_comment',\n        description: 'Update an existing issue comment',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            owner: {\n              type: 'string',\n              description: 'Repository owner',\n            },\n            repo: {\n              type: 'string',\n              description: 'Repository name',\n            },\n            comment_id: {\n              type: 'number',\n              description: 'Comment ID to update',\n            },\n            body: {\n              type: 'string',\n              description: 'New comment content',\n            },\n          },\n          required: ['owner', 'repo', 'comment_id', 'body'],\n        },\n      },\n      handler: async (args: unknown) => {\n        const params = args as UpdateIssueCommentParams;\n        const { data } = await octokit.issues.updateComment({\n          owner: params.owner,\n          repo: params.repo,\n          comment_id: params.comment_id,\n          body: params.body,\n        });\n\n        return {\n          id: data.id,\n          body: data.body,\n          user: {\n            login: data.user?.login,\n          },\n          updated_at: data.updated_at,\n          html_url: data.html_url,\n        };\n      },\n    });\n\n    // Delete issue comment tool\n    tools.push({\n      tool: {\n        name: 'delete_issue_comment',\n        description: 'Delete an issue comment',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            owner: {\n              type: 'string',\n              description: 'Repository owner',\n            },\n            repo: {\n              type: 'string',\n              description: 'Repository name',\n            },\n            comment_id: {\n              type: 'number',\n              description: 'Comment ID to delete',\n            },\n          },\n          required: ['owner', 'repo', 'comment_id'],\n        },\n      },\n      handler: async (args: unknown) => {\n        const params = args as DeleteIssueCommentParams;\n        await octokit.issues.deleteComment({\n          owner: params.owner,\n          repo: params.repo,\n          comment_id: params.comment_id,\n        });\n\n        return {\n          success: true,\n          message: `Comment ${params.comment_id} deleted successfully`,\n        };\n      },\n    });\n\n    // Add issue labels tool\n    tools.push({\n      tool: {\n        name: 'add_issue_labels',\n        description: 'Add labels to an issue',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            owner: {\n              type: 'string',\n              description: 'Repository owner',\n            },\n            repo: {\n              type: 'string',\n              description: 'Repository name',\n            },\n            issue_number: {\n              type: 'number',\n              description: 'Issue number',\n            },\n            labels: {\n              type: 'array',\n              description: 'Labels to add',\n              items: { type: 'string' },\n            },\n          },\n          required: ['owner', 'repo', 'issue_number', 'labels'],\n        },\n      },\n      handler: async (args: unknown) => {\n        const params = args as AddLabelsToIssueParams;\n        const { data } = await octokit.issues.addLabels({\n          owner: params.owner,\n          repo: params.repo,\n          issue_number: params.issue_number,\n          labels: params.labels,\n        });\n\n        return data.map((label) => ({\n          name: label.name,\n          color: label.color,\n          description: label.description,\n        }));\n      },\n    });\n\n    // Remove issue label tool\n    tools.push({\n      tool: {\n        name: 'remove_issue_label',\n        description: 'Remove a label from an issue',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            owner: {\n              type: 'string',\n              description: 'Repository owner',\n            },\n            repo: {\n              type: 'string',\n              description: 'Repository name',\n            },\n            issue_number: {\n              type: 'number',\n              description: 'Issue number',\n            },\n            name: {\n              type: 'string',\n              description: 'Label name to remove',\n            },\n          },\n          required: ['owner', 'repo', 'issue_number', 'name'],\n        },\n      },\n      handler: async (args: unknown) => {\n        const params = args as RemoveLabelFromIssueParams;\n        await octokit.issues.removeLabel({\n          owner: params.owner,\n          repo: params.repo,\n          issue_number: params.issue_number,\n          name: params.name,\n        });\n\n        return {\n          success: true,\n          message: `Label '${params.name}' removed from issue ${params.issue_number}`,\n        };\n      },\n    });\n\n    // Lock issue tool\n    tools.push({\n      tool: {\n        name: 'lock_issue',\n        description: 'Lock an issue',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            owner: {\n              type: 'string',\n              description: 'Repository owner',\n            },\n            repo: {\n              type: 'string',\n              description: 'Repository name',\n            },\n            issue_number: {\n              type: 'number',\n              description: 'Issue number',\n            },\n            lock_reason: {\n              type: 'string',\n              description: 'Reason for locking',\n              enum: ['off-topic', 'too heated', 'resolved', 'spam'],\n            },\n          },\n          required: ['owner', 'repo', 'issue_number'],\n        },\n      },\n      handler: async (args: unknown) => {\n        const params = args as LockIssueParams;\n        await octokit.issues.lock({\n          owner: params.owner,\n          repo: params.repo,\n          issue_number: params.issue_number,\n          lock_reason: params.lock_reason,\n        });\n\n        return {\n          success: true,\n          message: `Issue ${params.issue_number} locked successfully`,\n        };\n      },\n    });\n\n    // Unlock issue tool\n    tools.push({\n      tool: {\n        name: 'unlock_issue',\n        description: 'Unlock an issue',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            owner: {\n              type: 'string',\n              description: 'Repository owner',\n            },\n            repo: {\n              type: 'string',\n              description: 'Repository name',\n            },\n            issue_number: {\n              type: 'number',\n              description: 'Issue number',\n            },\n          },\n          required: ['owner', 'repo', 'issue_number'],\n        },\n      },\n      handler: async (args: unknown) => {\n        const params = args as UnlockIssueParams;\n        await octokit.issues.unlock({\n          owner: params.owner,\n          repo: params.repo,\n          issue_number: params.issue_number,\n        });\n\n        return {\n          success: true,\n          message: `Issue ${params.issue_number} unlocked successfully`,\n        };\n      },\n    });\n  }\n\n  return tools;\n}"