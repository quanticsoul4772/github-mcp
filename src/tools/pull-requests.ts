import { Octokit } from '@octokit/rest';\nimport { z } from 'zod';\nimport { ToolConfig } from '../types.js';\nimport { createTypeSafeHandler } from '../utils/type-safety.js';\nimport {\n  ListPullRequestsParams,\n  CreatePullRequestParams,\n  UpdatePullRequestParams,\n  MergePullRequestParams,\n  GetPullRequestDiffParams,\n  DismissPullRequestReviewParams,\n  CreatePullRequestReviewCommentParams\n} from '../tool-types.js';\n\ninterface GetPullRequestParams {\n  owner: string;\n  repo: string;\n  pull_number: number;\n  expected_head_sha?: string;\n}\n\ninterface GetPullRequestCommitsParams {\n  owner: string;\n  repo: string;\n  pull_number: number;\n  page?: number;\n  perPage?: number;\n}\n\ninterface GetPullRequestFilesParams {\n  owner: string;\n  repo: string;\n  pull_number: number;\n  page?: number;\n  perPage?: number;\n}\n\ninterface GetPullRequestReviewsParams {\n  owner: string;\n  repo: string;\n  pull_number: number;\n  page?: number;\n  perPage?: number;\n}\n\ninterface CreatePullRequestReviewParams {\n  owner: string;\n  repo: string;\n  pull_number: number;\n  body?: string;\n  event?: 'APPROVE' | 'REQUEST_CHANGES' | 'COMMENT';\n  comments?: Array<{\n    path: string;\n    line?: number;\n    body: string;\n  }>;\n  commitID?: string;\n}\n\ninterface AddPullRequestCommentParams {\n  owner: string;\n  repo: string;\n  pull_number: number;\n  body: string;\n}\n\ninterface RequestPullRequestReviewersParams {\n  owner: string;\n  repo: string;\n  pull_number: number;\n  reviewers?: string[];\n  team_reviewers?: string[];\n}\n\ninterface SearchPullRequestsParams {\n  query: string;\n  sort?: 'comments' | 'reactions' | 'reactions-+1' | 'reactions--1' | 'reactions-smile' | 'reactions-thinking_face' | 'reactions-heart' | 'reactions-tada' | 'interactions' | 'created' | 'updated';\n  order?: 'asc' | 'desc';\n  owner?: string;\n  repo?: string;\n  page?: number;\n  perPage?: number;\n}\n\n// Zod schema for search pull requests validation\nconst SearchPullRequestsSchema = z.object({\n  query: z.string().min(1, 'Search query is required'),\n  sort: z.enum(['comments', 'reactions', 'reactions-+1', 'reactions--1', 'reactions-smile', 'reactions-thinking_face', 'reactions-heart', 'reactions-tada', 'interactions', 'created', 'updated']).optional(),\n  order: z.enum(['asc', 'desc']).optional(),\n  owner: z.string().optional(),\n  repo: z.string().optional(),\n  page: z.number().int().min(1).optional(),\n  perPage: z.number().int().min(1).max(100).optional(),\n});\n\nexport function createPullRequestTools(octokit: Octokit, readOnly: boolean): ToolConfig[] {\n  const tools: ToolConfig[] = [];\n\n  // Get pull request details tool\n  tools.push({\n    tool: {\n      name: 'get_pull_request',\n      description: 'Get details of a specific pull request',\n      inputSchema: {\n        type: 'object',\n        properties: {\n          owner: {\n            type: 'string',\n            description: 'Repository owner',\n          },\n          repo: {\n            type: 'string',\n            description: 'Repository name',\n          },\n          pull_number: {\n            type: 'number',\n            description: 'Pull request number',\n          },\n        },\n        required: ['owner', 'repo', 'pull_number'],\n      },\n    },\n    handler: async (args: unknown) => {\n      const params = args as GetPullRequestParams;\n      const { data } = await octokit.pulls.get({\n        owner: params.owner,\n        repo: params.repo,\n        pull_number: params.pull_number,\n      });\n\n      return {\n        number: data.number,\n        title: data.title,\n        state: data.state,\n        body: data.body,\n        user: {\n          login: data.user?.login,\n          type: data.user?.type,\n        },\n        head: {\n          ref: data.head.ref,\n          sha: data.head.sha,\n          label: data.head.label,\n        },\n        base: {\n          ref: data.base.ref,\n          sha: data.base.sha,\n          label: data.base.label,\n        },\n        merged: data.merged,\n        mergeable: data.mergeable,\n        mergeable_state: data.mergeable_state,\n        merged_by: data.merged_by ? {\n          login: data.merged_by.login,\n        } : null,\n        commits: data.commits,\n        additions: data.additions,\n        deletions: data.deletions,\n        changed_files: data.changed_files,\n        comments: data.comments,\n        review_comments: data.review_comments,\n        created_at: data.created_at,\n        updated_at: data.updated_at,\n        closed_at: data.closed_at,\n        merged_at: data.merged_at,\n        html_url: data.html_url,\n        diff_url: data.diff_url,\n        patch_url: data.patch_url,\n      };\n    },\n  });\n\n  // List pull requests tool\n  tools.push({\n    tool: {\n      name: 'list_pull_requests',\n      description: 'List pull requests in a repository',\n      inputSchema: {\n        type: 'object',\n        properties: {\n          owner: {\n            type: 'string',\n            description: 'Repository owner',\n          },\n          repo: {\n            type: 'string',\n            description: 'Repository name',\n          },\n          state: {\n            type: 'string',\n            description: 'Filter by state',\n            enum: ['open', 'closed', 'all'],\n          },\n          head: {\n            type: 'string',\n            description: 'Filter by head user/org and branch',\n          },\n          base: {\n            type: 'string',\n            description: 'Filter by base branch',\n          },\n          sort: {\n            type: 'string',\n            description: 'Sort by',\n            enum: ['created', 'updated', 'popularity', 'long-running'],\n          },\n          direction: {\n            type: 'string',\n            description: 'Sort direction',\n            enum: ['asc', 'desc'],\n          },\n          page: {\n            type: 'number',\n            description: 'Page number for pagination (min 1)',\n            minimum: 1,\n          },\n          perPage: {\n            type: 'number',\n            description: 'Results per page for pagination (min 1, max 100)',\n            minimum: 1,\n            maximum: 100,\n          },\n        },\n        required: ['owner', 'repo'],\n      },\n    },\n    handler: async (args: unknown) => {\n      const params = args as ListPullRequestsParams;\n      const { data } = await octokit.pulls.list({\n        owner: params.owner,\n        repo: params.repo,\n        state: params.state as any,\n        head: params.head,\n        base: params.base,\n        sort: params.sort as any,\n        direction: params.direction as any,\n        page: params.page,\n        per_page: params.perPage,\n      });\n\n      return data.map((pr) => ({\n        number: pr.number,\n        title: pr.title,\n        state: pr.state,\n        user: {\n          login: pr.user?.login,\n        },\n        head: {\n          ref: pr.head.ref,\n          label: pr.head.label,\n        },\n        base: {\n          ref: pr.base.ref,\n          label: pr.base.label,\n        },\n        draft: pr.draft,\n        created_at: pr.created_at,\n        updated_at: pr.updated_at,\n        html_url: pr.html_url,\n      }));\n    },\n  });\n\n  // List pull request files tool\n  tools.push({\n    tool: {\n      name: 'list_pull_request_files',\n      description: 'Get files changed in a pull request',\n      inputSchema: {\n        type: 'object',\n        properties: {\n          owner: {\n            type: 'string',\n            description: 'Repository owner',\n          },\n          repo: {\n            type: 'string',\n            description: 'Repository name',\n          },\n          pull_number: {\n            type: 'number',\n            description: 'Pull request number',\n          },\n          page: {\n            type: 'number',\n            description: 'Page number for pagination (min 1)',\n            minimum: 1,\n          },\n          perPage: {\n            type: 'number',\n            description: 'Results per page for pagination (min 1, max 100)',\n            minimum: 1,\n            maximum: 100,\n          },\n        },\n        required: ['owner', 'repo', 'pull_number'],\n      },\n    },\n    handler: async (args: unknown) => {\n      const params = args as GetPullRequestFilesParams;\n      const { data } = await octokit.pulls.listFiles({\n        owner: params.owner,\n        repo: params.repo,\n        pull_number: params.pull_number,\n        page: params.page,\n        per_page: params.perPage,\n      });\n\n      return data.map((file) => ({\n        filename: file.filename,\n        status: file.status,\n        additions: file.additions,\n        deletions: file.deletions,\n        changes: file.changes,\n        patch: file.patch,\n        sha: file.sha,\n        blob_url: file.blob_url,\n        raw_url: file.raw_url,\n        contents_url: file.contents_url,\n      }));\n    },\n  });\n\n  // Get pull request diff tool\n  tools.push({\n    tool: {\n      name: 'get_pull_request_diff',\n      description: 'Get the diff of a pull request',\n      inputSchema: {\n        type: 'object',\n        properties: {\n          owner: {\n            type: 'string',\n            description: 'Repository owner',\n          },\n          repo: {\n            type: 'string',\n            description: 'Repository name',\n          },\n          pull_number: {\n            type: 'number',\n            description: 'Pull request number',\n          },\n        },\n        required: ['owner', 'repo', 'pull_number'],\n      },\n    },\n    handler: async (args: unknown) => {\n      const params = args as GetPullRequestDiffParams;\n      const response = await octokit.pulls.get({\n        owner: params.owner,\n        repo: params.repo,\n        pull_number: params.pull_number,\n        mediaType: {\n          format: 'diff',\n        },\n      });\n\n      return {\n        diff: response.data,\n      };\n    },\n  });\n\n  // List pull request comments tool\n  tools.push({\n    tool: {\n      name: 'list_pull_request_comments',\n      description: 'Get review comments on a pull request',\n      inputSchema: {\n        type: 'object',\n        properties: {\n          owner: {\n            type: 'string',\n            description: 'Repository owner',\n          },\n          repo: {\n            type: 'string',\n            description: 'Repository name',\n          },\n          pull_number: {\n            type: 'number',\n            description: 'Pull request number',\n          },\n        },\n        required: ['owner', 'repo', 'pull_number'],\n      },\n    },\n    handler: async (args: unknown) => {\n      const params = args as GetPullRequestParams;\n      const { data } = await octokit.pulls.listReviewComments({\n        owner: params.owner,\n        repo: params.repo,\n        pull_number: params.pull_number,\n      });\n\n      return data.map((comment) => ({\n        id: comment.id,\n        body: comment.body,\n        path: comment.path,\n        line: comment.line,\n        side: comment.side,\n        start_line: comment.start_line,\n        start_side: comment.start_side,\n        user: {\n          login: comment.user?.login,\n        },\n        created_at: comment.created_at,\n        updated_at: comment.updated_at,\n        html_url: comment.html_url,\n      }));\n    },\n  });\n\n  // List pull request reviews tool\n  tools.push({\n    tool: {\n      name: 'list_pull_request_reviews',\n      description: 'Get reviews on a pull request',\n      inputSchema: {\n        type: 'object',\n        properties: {\n          owner: {\n            type: 'string',\n            description: 'Repository owner',\n          },\n          repo: {\n            type: 'string',\n            description: 'Repository name',\n          },\n          pull_number: {\n            type: 'number',\n            description: 'Pull request number',\n          },\n        },\n        required: ['owner', 'repo', 'pull_number'],\n      },\n    },\n    handler: async (args: unknown) => {\n      const params = args as GetPullRequestReviewsParams;\n      const { data } = await octokit.pulls.listReviews({\n        owner: params.owner,\n        repo: params.repo,\n        pull_number: params.pull_number,\n      });\n\n      return data.map((review) => ({\n        id: review.id,\n        user: {\n          login: review.user?.login,\n        },\n        body: review.body,\n        state: review.state,\n        submitted_at: review.submitted_at,\n        html_url: review.html_url,\n      }));\n    },\n  });\n\n  // Get pull request status checks tool\n  tools.push({\n    tool: {\n      name: 'get_pull_request_status',\n      description: 'Get status checks for a pull request',\n      inputSchema: {\n        type: 'object',\n        properties: {\n          owner: {\n            type: 'string',\n            description: 'Repository owner',\n          },\n          repo: {\n            type: 'string',\n            description: 'Repository name',\n          },\n          pull_number: {\n            type: 'number',\n            description: 'Pull request number',\n          },\n        },\n        required: ['owner', 'repo', 'pull_number'],\n      },\n    },\n    handler: async (args: unknown) => {\n      const params = args as GetPullRequestParams;\n      // First get the PR to get the head SHA\n      const { data: pr } = await octokit.pulls.get({\n        owner: params.owner,\n        repo: params.repo,\n        pull_number: params.pull_number,\n      });\n\n      // Get the combined status\n      const { data: status } = await octokit.repos.getCombinedStatusForRef({\n        owner: params.owner,\n        repo: params.repo,\n        ref: pr.head.sha,\n      });\n\n      return {\n        state: status.state,\n        statuses: status.statuses.map((s) => ({\n          state: s.state,\n          description: s.description,\n          context: s.context,\n          target_url: s.target_url,\n          created_at: s.created_at,\n          updated_at: s.updated_at,\n        })),\n        sha: status.sha,\n        total_count: status.total_count,\n      };\n    },\n  });\n\n  // Search pull requests tool\n  tools.push({\n    tool: {\n      name: 'search_pull_requests',\n      description: 'Search for pull requests',\n      inputSchema: {\n        type: 'object',\n        properties: {\n          query: {\n            type: 'string',\n            description: 'Search query using GitHub pull request search syntax',\n          },\n          sort: {\n            type: 'string',\n            description: 'Sort field',\n            enum: ['comments', 'reactions', 'reactions-+1', 'reactions--1', 'reactions-smile', 'reactions-thinking_face', 'reactions-heart', 'reactions-tada', 'interactions', 'created', 'updated'],\n          },\n          order: {\n            type: 'string',\n            description: 'Sort order',\n            enum: ['asc', 'desc'],\n          },\n          owner: {\n            type: 'string',\n            description: 'Optional repository owner',\n          },\n          repo: {\n            type: 'string',\n            description: 'Optional repository name',\n          },\n          page: {\n            type: 'number',\n            description: 'Page number for pagination (min 1)',\n            minimum: 1,\n          },\n          perPage: {\n            type: 'number',\n            description: 'Results per page for pagination (min 1, max 100)',\n            minimum: 1,\n            maximum: 100,\n          },\n        },\n        required: ['query'],\n      },\n    },\n    handler: createTypeSafeHandler(\n      SearchPullRequestsSchema,\n      async (params: SearchPullRequestsParams) => {\n        let query = `is:pr ${params.query}`;\n        \n        // Add repo filter if provided\n        if (params.owner && params.repo) {\n          query = `repo:${params.owner}/${params.repo} ${query}`;\n        }\n\n        const { data } = await octokit.search.issuesAndPullRequests({\n          q: query,\n          sort: params.sort as any,\n          order: params.order as any,\n          page: params.page,\n          per_page: params.perPage,\n        });\n\n        return {\n          total_count: data.total_count,\n          incomplete_results: data.incomplete_results,\n          items: data.items.map((item) => ({\n            number: item.number,\n            title: item.title,\n            state: item.state,\n            user: {\n              login: item.user?.login,\n            },\n            created_at: item.created_at,\n            updated_at: item.updated_at,\n            html_url: item.html_url,\n            repository_url: item.repository_url,\n          })),\n        };\n      },\n      'search_pull_requests'\n    ),\n  });\n\n  // Add write operations if not in read-only mode\n  if (!readOnly) {\n    // Create pull request tool\n    tools.push({\n      tool: {\n        name: 'create_pull_request',\n        description: 'Create a new pull request',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            owner: {\n              type: 'string',\n              description: 'Repository owner',\n            },\n            repo: {\n              type: 'string',\n              description: 'Repository name',\n            },\n            title: {\n              type: 'string',\n              description: 'PR title',\n            },\n            head: {\n              type: 'string',\n              description: 'Branch containing changes',\n            },\n            base: {\n              type: 'string',\n              description: 'Branch to merge into',\n            },\n            body: {\n              type: 'string',\n              description: 'PR description',\n            },\n            draft: {\n              type: 'boolean',\n              description: 'Create as draft PR',\n            },\n            maintainer_can_modify: {\n              type: 'boolean',\n              description: 'Allow maintainer edits',\n            },\n          },\n          required: ['owner', 'repo', 'title', 'head', 'base'],\n        },\n      },\n      handler: async (args: unknown) => {\n        const params = args as CreatePullRequestParams;\n        const { data } = await octokit.pulls.create({\n          owner: params.owner,\n          repo: params.repo,\n          title: params.title,\n          head: params.head,\n          base: params.base,\n          body: params.body,\n          draft: params.draft,\n          maintainer_can_modify: params.maintainer_can_modify,\n        });\n\n        return {\n          number: data.number,\n          title: data.title,\n          state: data.state,\n          html_url: data.html_url,\n          head: {\n            ref: data.head.ref,\n            label: data.head.label,\n          },\n          base: {\n            ref: data.base.ref,\n            label: data.base.label,\n          },\n          created_at: data.created_at,\n        };\n      },\n    });\n\n    // Update pull request tool\n    tools.push({\n      tool: {\n        name: 'update_pull_request',\n        description: 'Update an existing pull request',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            owner: {\n              type: 'string',\n              description: 'Repository owner',\n            },\n            repo: {\n              type: 'string',\n              description: 'Repository name',\n            },\n            pull_number: {\n              type: 'number',\n              description: 'Pull request number to update',\n            },\n            title: {\n              type: 'string',\n              description: 'New title',\n            },\n            body: {\n              type: 'string',\n              description: 'New description',\n            },\n            state: {\n              type: 'string',\n              description: 'New state',\n              enum: ['open', 'closed'],\n            },\n            base: {\n              type: 'string',\n              description: 'New base branch name',\n            },\n            maintainer_can_modify: {\n              type: 'boolean',\n              description: 'Allow maintainer edits',\n            },\n          },\n          required: ['owner', 'repo', 'pull_number'],\n        },\n      },\n      handler: async (args: unknown) => {\n        const params = args as UpdatePullRequestParams;\n        const { data } = await octokit.pulls.update({\n          owner: params.owner,\n          repo: params.repo,\n          pull_number: params.pull_number,\n          title: params.title,\n          body: params.body,\n          state: params.state as any,\n          base: params.base,\n          maintainer_can_modify: params.maintainer_can_modify,\n        });\n\n        return {\n          number: data.number,\n          title: data.title,\n          state: data.state,\n          body: data.body,\n          html_url: data.html_url,\n          updated_at: data.updated_at,\n        };\n      },\n    });\n\n    // Merge pull request tool\n    tools.push({\n      tool: {\n        name: 'merge_pull_request',\n        description: 'Merge a pull request',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            owner: {\n              type: 'string',\n              description: 'Repository owner',\n            },\n            repo: {\n              type: 'string',\n              description: 'Repository name',\n            },\n            pull_number: {\n              type: 'number',\n              description: 'Pull request number',\n            },\n            commit_title: {\n              type: 'string',\n              description: 'Title for merge commit',\n            },\n            commit_message: {\n              type: 'string',\n              description: 'Extra detail for merge commit',\n            },\n            merge_method: {\n              type: 'string',\n              description: 'Merge method',\n              enum: ['merge', 'squash', 'rebase'],\n            },\n          },\n          required: ['owner', 'repo', 'pull_number'],\n        },\n      },\n      handler: async (args: unknown) => {\n        const params = args as MergePullRequestParams;\n        const { data } = await octokit.pulls.merge({\n          owner: params.owner,\n          repo: params.repo,\n          pull_number: params.pull_number,\n          commit_title: params.commit_title,\n          commit_message: params.commit_message,\n          merge_method: params.merge_method,\n        });\n\n        return {\n          merged: data.merged,\n          message: data.message,\n          sha: data.sha,\n        };\n      },\n    });\n\n    // Create pull request review tool\n    tools.push({\n      tool: {\n        name: 'create_pull_request_review',\n        description: 'Create and submit a pull request review',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            owner: {\n              type: 'string',\n              description: 'Repository owner',\n            },\n            repo: {\n              type: 'string',\n              description: 'Repository name',\n            },\n            pull_number: {\n              type: 'number',\n              description: 'Pull request number',\n            },\n            body: {\n              type: 'string',\n              description: 'Review comment text',\n            },\n            event: {\n              type: 'string',\n              description: 'Review action to perform',\n              enum: ['APPROVE', 'REQUEST_CHANGES', 'COMMENT'],\n            },\n            commitID: {\n              type: 'string',\n              description: 'SHA of commit to review',\n            },\n          },\n          required: ['owner', 'repo', 'pull_number', 'body', 'event'],\n        },\n      },\n      handler: async (args: unknown) => {\n        const params = args as CreatePullRequestReviewParams;\n        const { data } = await octokit.pulls.createReview({\n          owner: params.owner,\n          repo: params.repo,\n          pull_number: params.pull_number,\n          body: params.body,\n          event: params.event as any,\n          commit_id: params.commitID,\n        });\n\n        return {\n          id: data.id,\n          body: data.body,\n          state: data.state,\n          user: {\n            login: data.user?.login,\n          },\n          submitted_at: data.submitted_at,\n          html_url: data.html_url,\n        };\n      },\n    });\n\n    // Update pull request branch tool\n    tools.push({\n      tool: {\n        name: 'update_pull_request_branch',\n        description: 'Update a pull request branch with the latest changes from base branch',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            owner: {\n              type: 'string',\n              description: 'Repository owner',\n            },\n            repo: {\n              type: 'string',\n              description: 'Repository name',\n            },\n            pull_number: {\n              type: 'number',\n              description: 'Pull request number',\n            },\n            expectedHeadSha: {\n              type: 'string',\n              description: 'The expected SHA of the pull request\\'s HEAD ref',\n            },\n          },\n          required: ['owner', 'repo', 'pull_number'],\n        },\n      },\n      handler: async (args: unknown) => {\n        const params = args as GetPullRequestParams;\n        const { data } = await octokit.pulls.updateBranch({\n          owner: params.owner,\n          repo: params.repo,\n          pull_number: params.pull_number,\n          expected_head_sha: params.expected_head_sha,\n        });\n\n        return {\n          message: data.message,\n          url: data.url,\n        };\n      },\n    });\n\n    // Dismiss pull request review tool\n    tools.push({\n      tool: {\n        name: 'dismiss_pull_request_review',\n        description: 'Dismiss a pull request review',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            owner: {\n              type: 'string',\n              description: 'Repository owner',\n            },\n            repo: {\n              type: 'string',\n              description: 'Repository name',\n            },\n            pull_number: {\n              type: 'number',\n              description: 'Pull request number',\n            },\n            review_id: {\n              type: 'number',\n              description: 'Review ID to dismiss',\n            },\n            message: {\n              type: 'string',\n              description: 'Dismissal message',\n            },\n          },\n          required: ['owner', 'repo', 'pull_number', 'review_id', 'message'],\n        },\n      },\n      handler: async (args: unknown) => {\n        const params = args as DismissPullRequestReviewParams;\n        const { data } = await octokit.pulls.dismissReview({\n          owner: params.owner,\n          repo: params.repo,\n          pull_number: params.pull_number,\n          review_id: params.review_id,\n          message: params.message,\n        });\n\n        return {\n          id: data.id,\n          state: data.state,\n          user: {\n            login: data.user?.login,\n          },\n          body: data.body,\n          submitted_at: data.submitted_at,\n          html_url: data.html_url,\n        };\n      },\n    });\n\n    // Create pull request review comment tool\n    tools.push({\n      tool: {\n        name: 'create_pull_request_review_comment',\n        description: 'Create a review comment on a pull request',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            owner: {\n              type: 'string',\n              description: 'Repository owner',\n            },\n            repo: {\n              type: 'string',\n              description: 'Repository name',\n            },\n            pull_number: {\n              type: 'number',\n              description: 'Pull request number',\n            },\n            body: {\n              type: 'string',\n              description: 'Comment body',\n            },\n            commit_id: {\n              type: 'string',\n              description: 'SHA of the commit to comment on',\n            },\n            path: {\n              type: 'string',\n              description: 'Relative path of the file to comment on',\n            },\n            line: {\n              type: 'number',\n              description: 'Line number in the diff to comment on',\n            },\n            side: {\n              type: 'string',\n              description: 'Side of the diff',\n              enum: ['LEFT', 'RIGHT'],\n            },\n          },\n          required: ['owner', 'repo', 'pull_number', 'body', 'commit_id', 'path', 'line'],\n        },\n      },\n      handler: async (args: unknown) => {\n        const params = args as CreatePullRequestReviewCommentParams;\n        const { data } = await octokit.pulls.createReviewComment({\n          owner: params.owner,\n          repo: params.repo,\n          pull_number: params.pull_number,\n          body: params.body,\n          commit_id: params.commit_id,\n          path: params.path,\n          line: params.line,\n          side: params.side,\n        });\n\n        return {\n          id: data.id,\n          body: data.body,\n          path: data.path,\n          line: data.line,\n          side: data.side,\n          user: {\n            login: data.user?.login,\n          },\n          created_at: data.created_at,\n          html_url: data.html_url,\n        };\n      },\n    });\n  }\n\n  return tools;\n}"