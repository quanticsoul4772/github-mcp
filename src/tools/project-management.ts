import { Octokit } from '@octokit/rest';\nimport { z } from 'zod';\nimport { ToolConfig } from '../types.js';\nimport { createTypeSafeHandler } from '../utils/type-safety.js';\nimport {\n  validateGraphQLInput,\n  validateGraphQLVariableValue,\n  ProjectBoardsSchema,\n  MilestonesWithIssuesSchema,\n  CrossRepoProjectViewSchema,\n  GraphQLValidationError\n} from '../graphql-validation.js';\nimport { withErrorHandling } from '../errors.js';\n\n// Type definitions for project management tools\ninterface GetProjectBoardsParams {\n  owner: string;\n  repo?: string;\n  first?: number;\n}\n\ninterface GetMilestonesWithIssuesParams {\n  owner: string;\n  repo: string;\n  state?: 'OPEN' | 'CLOSED';\n  first?: number;\n}\n\ninterface RepositoryRef {\n  owner: string;\n  repo: string;\n}\n\ninterface GetCrossRepoProjectViewParams {\n  repositories: RepositoryRef[];\n  labels?: string[];\n  assignee?: string;\n  state?: 'OPEN' | 'CLOSED';\n  milestone?: string;\n}\n\n// Zod schemas for validation\nconst GetProjectBoardsSchema = z.object({\n  owner: z.string().min(1, 'Owner is required'),\n  repo: z.string().optional(),\n  first: z.number().int().min(1).max(50).optional(),\n});\n\nconst GetMilestonesWithIssuesSchema = z.object({\n  owner: z.string().min(1, 'Owner is required'),\n  repo: z.string().min(1, 'Repository name is required'),\n  state: z.enum(['OPEN', 'CLOSED']).optional(),\n  first: z.number().int().min(1).max(25).optional(),\n});\n\nconst RepositoryRefSchema = z.object({\n  owner: z.string().min(1, 'Owner is required'),\n  repo: z.string().min(1, 'Repository name is required'),\n});\n\nconst GetCrossRepoProjectViewSchema = z.object({\n  repositories: z.array(RepositoryRefSchema).min(1, 'At least one repository is required').max(5, 'Maximum 5 repositories allowed'),\n  labels: z.array(z.string()).optional(),\n  assignee: z.string().optional(),\n  state: z.enum(['OPEN', 'CLOSED']).optional(),\n  milestone: z.string().optional(),\n});\n\n/**\n * Creates project management tools using GraphQL API for enhanced project tracking capabilities.\n * \n * These tools provide sophisticated project management functionality that leverages GraphQL's\n * ability to fetch nested relationships and contextual data in single queries,\n * offering performance and feature advantages over REST-based project management.\n * \n * @param octokit - Configured Octokit instance with GraphQL support\n * @param readOnly - Whether to exclude write operations (all project tools are read-only)\n * @returns Array of project management tool configurations\n * \n * @example\n * ```typescript\n * const tools = createProjectManagementTools(octokit, true);\n * // Returns tools: get_project_boards, get_milestones_with_issues, etc.\n * ```\n * \n * @see https://docs.github.com/en/graphql/reference/objects#project\n */\nexport function createProjectManagementTools(octokit: Octokit, readOnly: boolean): ToolConfig[] {\n  const tools: ToolConfig[] = [];\n\n  // Get project boards (GitHub Projects V2)\n  tools.push({\n    tool: {\n      name: 'get_project_boards',\n      description: 'Get GitHub Projects V2 boards for a repository or organization',\n      inputSchema: {\n        type: 'object',\n        properties: {\n          owner: {\n            type: 'string',\n            description: 'Repository owner or organization',\n          },\n          repo: {\n            type: 'string',\n            description: 'Repository name (optional, for repository-specific projects)',\n          },\n          first: {\n            type: 'number',\n            description: 'Number of projects to return (max 50)',\n            minimum: 1,\n            maximum: 50,\n          },\n        },\n        required: ['owner'],\n      },\n    },\n    handler: createTypeSafeHandler(\n      GetProjectBoardsSchema,\n      async (params: GetProjectBoardsParams) => {\n        return withErrorHandling(\n          'get_project_boards',\n          async () => {\n            const query = params.repo ? `\n              query($owner: String!, $repo: String!, $first: Int!) {\n                repository(owner: $owner, name: $repo) {\n                  projectsV2(first: $first) {\n                    totalCount\n                    nodes {\n                      id\n                      number\n                      title\n                      shortDescription\n                      readme\n                      url\n                      createdAt\n                      updatedAt\n                      closed\n                      public\n                      owner {\n                        login\n                      }\n                      creator {\n                        login\n                      }\n                      items(first: 20) {\n                        totalCount\n                        nodes {\n                          id\n                          type\n                          content {\n                            ... on Issue {\n                              number\n                              title\n                              state\n                              url\n                            }\n                            ... on PullRequest {\n                              number\n                              title\n                              state\n                              url\n                            }\n                            ... on DraftIssue {\n                              title\n                              body\n                            }\n                          }\n                        }\n                      }\n                      fields(first: 20) {\n                        totalCount\n                        nodes {\n                          id\n                          name\n                          dataType\n                          ... on ProjectV2SingleSelectField {\n                            options {\n                              id\n                              name\n                              color\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            ` : `\n              query($owner: String!, $first: Int!) {\n                user(login: $owner) {\n                  projectsV2(first: $first) {\n                    totalCount\n                    nodes {\n                      id\n                      number\n                      title\n                      shortDescription\n                      readme\n                      url\n                      createdAt\n                      updatedAt\n                      closed\n                      public\n                      owner {\n                        login\n                      }\n                      creator {\n                        login\n                      }\n                      items(first: 20) {\n                        totalCount\n                        nodes {\n                          id\n                          type\n                          content {\n                            ... on Issue {\n                              number\n                              title\n                              state\n                              url\n                              repository {\n                                nameWithOwner\n                              }\n                            }\n                            ... on PullRequest {\n                              number\n                              title\n                              state\n                              url\n                              repository {\n                                nameWithOwner\n                              }\n                            }\n                            ... on DraftIssue {\n                              title\n                              body\n                            }\n                          }\n                        }\n                      }\n                      fields(first: 20) {\n                        totalCount\n                        nodes {\n                          id\n                          name\n                          dataType\n                          ... on ProjectV2SingleSelectField {\n                            options {\n                              id\n                              name\n                              color\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n                organization(login: $owner) {\n                  projectsV2(first: $first) {\n                    totalCount\n                    nodes {\n                      id\n                      number\n                      title\n                      shortDescription\n                      readme\n                      url\n                      createdAt\n                      updatedAt\n                      closed\n                      public\n                      owner {\n                        login\n                      }\n                      creator {\n                        login\n                      }\n                      items(first: 20) {\n                        totalCount\n                        nodes {\n                          id\n                          type\n                          content {\n                            ... on Issue {\n                              number\n                              title\n                              state\n                              url\n                              repository {\n                                nameWithOwner\n                              }\n                            }\n                            ... on PullRequest {\n                              number\n                              title\n                              state\n                              url\n                              repository {\n                                nameWithOwner\n                              }\n                            }\n                            ... on DraftIssue {\n                              title\n                              body\n                            }\n                          }\n                        }\n                      }\n                      fields(first: 20) {\n                        totalCount\n                        nodes {\n                          id\n                          name\n                          dataType\n                          ... on ProjectV2SingleSelectField {\n                            options {\n                              id\n                              name\n                              color\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            `;\n\n            // Validate GraphQL variables before execution\n            const variables = {\n              owner: validateGraphQLVariableValue(params.owner, 'owner'),\n              ...(params.repo && { repo: validateGraphQLVariableValue(params.repo, 'repo') }),\n              first: validateGraphQLVariableValue(params.first || 25, 'first'),\n            };\n\n            const result: any = await (octokit as any).graphqlWithComplexity ? \n              await (octokit as any).graphqlWithComplexity(query, variables) :\n              await octokit.graphql(query, variables);\n\n            let projects;\n            if (params.repo) {\n              projects = result.repository?.projectsV2;\n            } else {\n              // Try user first, then organization\n              projects = result.user?.projectsV2 || result.organization?.projectsV2;\n            }\n\n            if (!projects) {\n              throw new Error(`No projects found for ${params.owner}`);\n            }\n\n            return {\n              totalCount: projects.totalCount,\n              projects: projects.nodes,\n            };\n          },\n          { tool: 'get_project_boards', owner: params.owner, repo: params.repo }\n        );\n      },\n      'get_project_boards'\n    ),\n  });\n\n  // Get milestones with associated issues\n  tools.push({\n    tool: {\n      name: 'get_milestones_with_issues',\n      description: 'Get repository milestones with their associated issues and pull requests',\n      inputSchema: {\n        type: 'object',\n        properties: {\n          owner: {\n            type: 'string',\n            description: 'Repository owner',\n          },\n          repo: {\n            type: 'string',\n            description: 'Repository name',\n          },\n          state: {\n            type: 'string',\n            description: 'Filter by milestone state',\n            enum: ['OPEN', 'CLOSED'],\n          },\n          first: {\n            type: 'number',\n            description: 'Number of milestones to return (max 25)',\n            minimum: 1,\n            maximum: 25,\n          },\n        },\n        required: ['owner', 'repo'],\n      },\n    },\n    handler: createTypeSafeHandler(\n      GetMilestonesWithIssuesSchema,\n      async (params: GetMilestonesWithIssuesParams) => {\n        return withErrorHandling(\n          'get_milestones_with_issues',\n          async () => {\n            const query = `\n              query($owner: String!, $repo: String!, $first: Int!, $state: MilestoneState) {\n                repository(owner: $owner, name: $repo) {\n                  milestones(first: $first, states: [$state], orderBy: {field: CREATED_AT, direction: DESC}) {\n                    totalCount\n                    nodes {\n                      id\n                      number\n                      title\n                      description\n                      state\n                      url\n                      createdAt\n                      updatedAt\n                      dueOn\n                      closedAt\n                      creator {\n                        login\n                        avatarUrl\n                      }\n                      issues(first: 50) {\n                        totalCount\n                        nodes {\n                          id\n                          number\n                          title\n                          state\n                          url\n                          createdAt\n                          author {\n                            login\n                          }\n                          labels(first: 10) {\n                            nodes {\n                              name\n                              color\n                            }\n                          }\n                          assignees(first: 5) {\n                            nodes {\n                              login\n                              avatarUrl\n                            }\n                          }\n                        }\n                      }\n                      pullRequests(first: 50) {\n                        totalCount\n                        nodes {\n                          id\n                          number\n                          title\n                          state\n                          url\n                          createdAt\n                          author {\n                            login\n                          }\n                          labels(first: 10) {\n                            nodes {\n                              name\n                              color\n                            }\n                          }\n                          assignees(first: 5) {\n                            nodes {\n                              login\n                              avatarUrl\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            `;\n\n            // Validate GraphQL variables before execution\n            const variables = {\n              owner: validateGraphQLVariableValue(params.owner, 'owner'),\n              repo: validateGraphQLVariableValue(params.repo, 'repo'),\n              first: validateGraphQLVariableValue(params.first || 10, 'first'),\n              state: params.state ? validateGraphQLVariableValue(params.state, 'state') : undefined,\n            };\n\n            const result: any = await (octokit as any).graphqlWithComplexity ? \n              await (octokit as any).graphqlWithComplexity(query, variables) :\n              await octokit.graphql(query, variables);\n\n            if (!result.repository) {\n              throw new Error('Repository not found or milestones query failed');\n            }\n\n            const milestones = result.repository.milestones.nodes.map((milestone: any) => {\n              const allIssues = milestone.issues.nodes;\n              const allPullRequests = milestone.pullRequests.nodes;\n              \n              // Calculate progress\n              const openIssues = allIssues.filter((issue: any) => issue.state === 'OPEN').length;\n              const closedIssues = allIssues.filter((issue: any) => issue.state === 'CLOSED').length;\n              const openPRs = allPullRequests.filter((pr: any) => pr.state === 'OPEN').length;\n              const closedPRs = allPullRequests.filter((pr: any) => ['CLOSED', 'MERGED'].includes(pr.state)).length;\n              \n              const totalItems = allIssues.length + allPullRequests.length;\n              const completedItems = closedIssues + closedPRs;\n              const progressPercentage = totalItems > 0 ? Math.round((completedItems / totalItems) * 100) : 0;\n\n              return {\n                ...milestone,\n                progress: {\n                  total: totalItems,\n                  completed: completedItems,\n                  percentage: progressPercentage,\n                  issues: {\n                    open: openIssues,\n                    closed: closedIssues,\n                    total: allIssues.length,\n                  },\n                  pullRequests: {\n                    open: openPRs,\n                    closed: closedPRs,\n                    total: allPullRequests.length,\n                  },\n                },\n              };\n            });\n\n            return {\n              totalCount: result.repository.milestones.totalCount,\n              milestones,\n            };\n          },\n          { tool: 'get_milestones_with_issues', owner: params.owner, repo: params.repo }\n        );\n      },\n      'get_milestones_with_issues'\n    ),\n  });\n\n  // Cross-repository project view\n  tools.push({\n    tool: {\n      name: 'get_cross_repo_project_view',\n      description: 'Get a unified view of issues and PRs across multiple repositories for project management',\n      inputSchema: {\n        type: 'object',\n        properties: {\n          repositories: {\n            type: 'array',\n            items: {\n              type: 'object',\n              properties: {\n                owner: { type: 'string' },\n                repo: { type: 'string' },\n              },\n              required: ['owner', 'repo'],\n            },\n            description: 'List of repositories to include',\n            maxItems: 5,\n          },\n          labels: {\n            type: 'array',\n            items: { type: 'string' },\n            description: 'Filter by labels (optional)',\n          },\n          assignee: {\n            type: 'string',\n            description: 'Filter by assignee (optional)',\n          },\n          state: {\n            type: 'string',\n            description: 'Filter by state',\n            enum: ['OPEN', 'CLOSED'],\n          },\n          milestone: {\n            type: 'string',\n            description: 'Filter by milestone title (optional)',\n          },\n        },\n        required: ['repositories'],\n      },\n    },\n    handler: createTypeSafeHandler(\n      GetCrossRepoProjectViewSchema,\n      async (params: GetCrossRepoProjectViewParams) => {\n        return withErrorHandling(\n          'get_cross_repo_project_view',\n          async () => {\n            const repositories = params.repositories;\n            const results = [];\n\n            // Query each repository\n            for (const repoInfo of repositories) {\n              const query = `\n                query($owner: String!, $repo: String!, $states: [IssueState!]) {\n                  repository(owner: $owner, name: $repo) {\n                    name\n                    nameWithOwner\n                    url\n                    issues(first: 50, states: $states, orderBy: {field: UPDATED_AT, direction: DESC}) {\n                      totalCount\n                      nodes {\n                        id\n                        number\n                        title\n                        body\n                        state\n                        url\n                        createdAt\n                        updatedAt\n                        author {\n                          login\n                          avatarUrl\n                        }\n                        assignees(first: 5) {\n                          nodes {\n                            login\n                            avatarUrl\n                          }\n                        }\n                        labels(first: 10) {\n                          nodes {\n                            name\n                            color\n                          }\n                        }\n                        milestone {\n                          title\n                          dueOn\n                          state\n                        }\n                        comments {\n                          totalCount\n                        }\n                        reactions {\n                          totalCount\n                        }\n                      }\n                    }\n                    pullRequests(first: 50, states: $states, orderBy: {field: UPDATED_AT, direction: DESC}) {\n                      totalCount\n                      nodes {\n                        id\n                        number\n                        title\n                        body\n                        state\n                        url\n                        createdAt\n                        updatedAt\n                        author {\n                          login\n                          avatarUrl\n                        }\n                        assignees(first: 5) {\n                          nodes {\n                            login\n                            avatarUrl\n                          }\n                        }\n                        labels(first: 10) {\n                          nodes {\n                            name\n                            color\n                          }\n                        }\n                        milestone {\n                          title\n                          dueOn\n                          state\n                        }\n                        reviews(first: 10) {\n                          totalCount\n                          nodes {\n                            state\n                            author {\n                              login\n                            }\n                          }\n                        }\n                        mergeable\n                        isDraft\n                      }\n                    }\n                  }\n                }\n              `;\n\n              // Validate GraphQL variables before execution\n              const variables = {\n                owner: validateGraphQLVariableValue(repoInfo.owner, 'owner'),\n                repo: validateGraphQLVariableValue(repoInfo.repo, 'repo'),\n                states: params.state ? [validateGraphQLVariableValue(params.state, 'state')] : ['OPEN'],\n              };\n\n              const result: any = await (octokit as any).graphqlWithComplexity ? \n                await (octokit as any).graphqlWithComplexity(query, variables) :\n                await octokit.graphql(query, variables);\n\n              if (!result.repository) {\n                console.warn(`Repository ${repoInfo.owner}/${repoInfo.repo} not found or inaccessible`);\n                continue;\n              }\n\n              results.push({\n                repository: result.repository,\n                issues: result.repository.issues.nodes,\n                pullRequests: result.repository.pullRequests.nodes,\n              });\n            }\n\n            // Apply filters\n            let allIssues: any[] = [];\n            let allPullRequests: any[] = [];\n\n            for (const repoResult of results) {\n              let filteredIssues = repoResult.issues;\n              let filteredPRs = repoResult.pullRequests;\n\n              // Filter by labels\n              if (params.labels && params.labels.length > 0) {\n                filteredIssues = filteredIssues.filter((issue: any) =>\n                  params.labels!.some((label: string) =>\n                    issue.labels.nodes.some((issueLabel: any) => issueLabel.name === label)\n                  )\n                );\n                filteredPRs = filteredPRs.filter((pr: any) =>\n                  params.labels!.some((label: string) =>\n                    pr.labels.nodes.some((prLabel: any) => prLabel.name === label)\n                  )\n                );\n              }\n\n              // Filter by assignee\n              if (params.assignee) {\n                filteredIssues = filteredIssues.filter((issue: any) =>\n                  issue.assignees.nodes.some((assignee: any) => assignee.login === params.assignee)\n                );\n                filteredPRs = filteredPRs.filter((pr: any) =>\n                  pr.assignees.nodes.some((assignee: any) => assignee.login === params.assignee)\n                );\n              }\n\n              // Filter by milestone\n              if (params.milestone) {\n                filteredIssues = filteredIssues.filter((issue: any) => \n                  issue.milestone?.title === params.milestone\n                );\n                filteredPRs = filteredPRs.filter((pr: any) => \n                  pr.milestone?.title === params.milestone\n                );\n              }\n\n              // Add repository context to each item\n              allIssues.push(...filteredIssues.map((issue: any) => ({\n                ...issue,\n                repository: {\n                  name: repoResult.repository.name,\n                  nameWithOwner: repoResult.repository.nameWithOwner,\n                  url: repoResult.repository.url,\n                },\n                type: 'issue',\n              })));\n\n              allPullRequests.push(...filteredPRs.map((pr: any) => ({\n                ...pr,\n                repository: {\n                  name: repoResult.repository.name,\n                  nameWithOwner: repoResult.repository.nameWithOwner,\n                  url: repoResult.repository.url,\n                },\n                type: 'pullRequest',\n              })));\n            }\n\n            // Combine and sort by updated date\n            const allItems = [...allIssues, ...allPullRequests].sort(\n              (a, b) => new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime()\n            );\n\n            // Generate summary statistics\n            const summary = {\n              totalItems: allItems.length,\n              totalIssues: allIssues.length,\n              totalPullRequests: allPullRequests.length,\n              byRepository: results.map(r => ({\n                repository: r.repository.nameWithOwner,\n                issues: r.issues.length,\n                pullRequests: r.pullRequests.length,\n              })),\n              byState: {\n                open: allItems.filter(item => item.state === 'OPEN').length,\n                closed: allItems.filter(item => ['CLOSED', 'MERGED'].includes(item.state)).length,\n              },\n              byAssignee: Object.entries(\n                allItems.reduce((acc: any, item) => {\n                  for (const assignee of item.assignees.nodes) {\n                    acc[assignee.login] = (acc[assignee.login] || 0) + 1;\n                  }\n                  return acc;\n                }, {})\n              ).map(([login, count]) => ({ login, count }))\n                .sort((a: any, b: any) => b.count - a.count),\n            };\n\n            return {\n              summary,\n              items: allItems,\n              repositories: results.map(r => ({\n                name: r.repository.name,\n                nameWithOwner: r.repository.nameWithOwner,\n                url: r.repository.url,\n              })),\n            };\n          },\n          { tool: 'get_cross_repo_project_view', repositoryCount: params.repositories.length }\n        );\n      },\n      'get_cross_repo_project_view'\n    ),\n  });\n\n  return tools;\n}"