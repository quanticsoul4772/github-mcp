name: CI

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

# Default permissions for all jobs
permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    # Explicit minimal permissions for test job
    permissions:
      contents: read
      checks: write  # For test results
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript compiler check
        run: npm run build

      - name: Run linter
        run: npm run lint || echo "::warning::Linting failed - please fix linting issues"

      - name: Run tests with coverage
        run: npm test -- --coverage --watchAll=false || echo "::warning::Some tests failed"
        env:
          CI: true

      - name: Upload coverage to Codecov
        if: matrix.node-version == '20.x'
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  build:
    runs-on: ubuntu-latest
    needs: test
    # Explicit minimal permissions for build job
    permissions:
      contents: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Check bundle size
        run: |
          echo "Checking build output size..."
          du -sh dist/ || echo "No dist folder found"
          du -sh build/ || echo "No build folder found"

  quality-check:
    runs-on: ubuntu-latest
    # Explicit permissions for quality check job
    permissions:
      contents: read
      pull-requests: write  # To comment on PRs
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project for analysis
        run: npm run build

      - name: Check for TypeScript errors
        run: npx tsc --noEmit || echo "::warning::TypeScript errors found"

      - name: Check code formatting
        run: |
          npm run format:check || echo "::warning::Code formatting issues found"

      - name: Run code analysis agents
        id: agent_analysis
        run: |
          echo "Running code analysis agents..."
          
          # Create agent analysis script
          cat > agent_quality_check.mjs << 'EOF'
          import { quickAnalyze } from './build/agents/index.js';
          import fs from 'fs/promises';
          
          try {
            console.log('Running quality analysis with agents...');
            
            const result = await quickAnalyze('src/', {
              type: 'directory',
              depth: 'shallow',
              format: 'json'
            });
            
            const summary = result.analysis.summary;
            console.log(`Analysis completed: ${summary.totalFindings} issues found`);
            
            // Create quality metrics
            const qualityMetrics = {
              totalIssues: summary.totalFindings,
              critical: summary.findingsBySeverity?.critical || 0,
              high: summary.findingsBySeverity?.high || 0,
              medium: summary.findingsBySeverity?.medium || 0,
              low: summary.findingsBySeverity?.low || 0,
              categories: summary.findingsByCategory,
              agentsUsed: summary.agentsUsed
            };
            
            await fs.writeFile('quality-metrics.json', JSON.stringify(qualityMetrics, null, 2));
            
            // Set GitHub outputs
            console.log(`total_issues=${qualityMetrics.totalIssues}`);
            console.log(`critical_issues=${qualityMetrics.critical}`);
            console.log(`high_issues=${qualityMetrics.high}`);
            
            // Fail if critical issues found
            if (qualityMetrics.critical > 0) {
              console.log('❌ Critical quality issues found!');
              process.exit(1);
            } else if (qualityMetrics.high > 5) {
              console.log('⚠️ Too many high-priority issues found!');
              process.exit(1);
            } else {
              console.log('✅ Quality check passed');
            }
            
          } catch (error) {
            console.error('Agent analysis failed:', error);
            process.exit(1);
          }
          EOF
          
          node agent_quality_check.mjs

      - name: Analyze code complexity
        run: |
          npx complexity-report-html src/ || echo "::notice::Complexity report generated"

      - name: Check for unused dependencies
        run: |
          npx depcheck || echo "::notice::Unused dependencies check complete"

      - name: Upload quality metrics
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: quality-metrics-${{ github.run_number }}
          path: quality-metrics.json
          retention-days: 7

      - name: Comment quality results on PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              const metrics = JSON.parse(fs.readFileSync('quality-metrics.json', 'utf8'));
              
              let comment = '## 📊 Code Quality Check\n\n';
              comment += `**Total Issues**: ${metrics.totalIssues}\n`;
              
              if (metrics.critical > 0) {
                comment += `🔴 **Critical**: ${metrics.critical}\n`;
              }
              if (metrics.high > 0) {
                comment += `🟠 **High**: ${metrics.high}\n`;
              }
              if (metrics.medium > 0) {
                comment += `🟡 **Medium**: ${metrics.medium}\n`;
              }
              if (metrics.low > 0) {
                comment += `🔵 **Low**: ${metrics.low}\n`;
              }
              
              if (metrics.totalIssues === 0) {
                comment += '\n✅ **No quality issues found!**\n';
              } else {
                comment += '\n**Top Issue Categories**:\n';
                const topCategories = Object.entries(metrics.categories)
                  .filter(([_, count]) => count > 0)
                  .sort(([_, a], [__, b]) => b - a)
                  .slice(0, 3);
                
                for (const [category, count] of topCategories) {
                  comment += `- ${category.replace(/_/g, ' ')}: ${count}\n`;
                }
              }
              
              comment += `\n**Analysis by**: ${metrics.agentsUsed.join(', ')}`;
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.error('Error reading quality metrics:', error);
            }

  security-check:
    runs-on: ubuntu-latest
    # Explicit minimal permissions for security check job
    permissions:
      contents: read
      security-events: write  # For security scanning results
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: |
          npm audit --audit-level=moderate || echo "::warning::Security vulnerabilities found"

      - name: Check for known vulnerabilities
        run: |
          npx better-npm-audit audit || echo "::warning::Known vulnerabilities detected"

      - name: License compliance check
        run: |
          npx license-checker --production --summary || echo "::notice::License check complete"
