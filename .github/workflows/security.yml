name: Security Scanning
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  id-token: write
  actions: read
  checks: write
  statuses: write
  pull-requests: write

jobs:
  # Secret Scanning with TruffleHog
  trufflehog:
    name: TruffleHog Secret Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Fetch all history for scanning
      
      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@v3.92.0
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified
          
  # CodeQL Security Analysis
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      fail-fast: false
      matrix:
        language: ['javascript', 'typescript']
        # Add more languages as needed: ['python', 'java', 'go', 'csharp', 'cpp']
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          # Optionally specify custom queries
          # queries: security-extended,security-and-quality
      
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"
  
  # Dependency Review (only on PRs)
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5
      
      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          # Fail on critical and high severity vulnerabilities
          fail-on-severity: high
          # Check for vulnerable dependencies
          vulnerability-check: true
          # Check licenses
          license-check: true
          # Deny specific licenses
          deny-licenses: GPL-3.0, AGPL-3.0
          # Allow specific licenses
          allow-licenses: MIT, Apache-2.0, BSD-3-Clause, ISC
  
  # OpenSSF Scorecard
  scorecard:
    name: OpenSSF Scorecard
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    permissions:
      security-events: write
      id-token: write
      contents: read
      actions: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          persist-credentials: false
      
      - name: Run analysis
        uses: ossf/scorecard-action@v2.4.2
        with:
          results_file: results.sarif
          results_format: sarif
          publish_results: true
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: SARIF file
          path: results.sarif
          retention-days: 5
      
      - name: Upload SARIF results to code scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif
  
  # NPM Audit
  npm-audit:
    name: NPM Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run npm audit
        run: |
          npm audit --audit-level=moderate
          npm audit --json > npm-audit.json || true
      
      - name: Upload npm audit results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit-results
          path: npm-audit.json
          retention-days: 30
      
      - name: Check for critical vulnerabilities
        run: |
          if npm audit --audit-level=critical; then
            echo "No critical vulnerabilities found"
          else
            echo "Critical vulnerabilities detected!"
            exit 1
          fi
  
  # License Checking
  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Check licenses
        run: |
          npx license-checker --summary --excludePrivatePackages --onlyAllow 'MIT;Apache-2.0;BSD-3-Clause;BSD-2-Clause;ISC;CC0-1.0;CC-BY-3.0;CC-BY-4.0;Unlicense;WTFPL;0BSD' > license-report.txt
      
      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: license-report.txt
          retention-days: 30
  
  # SAST with Semgrep
  semgrep:
    name: Semgrep SAST
    runs-on: ubuntu-latest
    container:
      image: semgrep/semgrep
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      
      - name: Run Semgrep
        run: |
          semgrep ci --config auto \
            --sarif --output=semgrep.sarif \
            --metrics=off
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
      
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
        if: always()
  
  # Container Scanning (if Dockerfile exists)
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: ${{ hashFiles('**/Dockerfile') != '' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
